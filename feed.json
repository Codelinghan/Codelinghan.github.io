{
    "version": "https://jsonfeed.org/version/1",
    "title": "凌寒",
    "subtitle": "",
    "icon": "http://example.com/images/favicon.ico",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/01/10/%E6%90%AD%E5%BB%BAhexoBlog/",
            "url": "http://example.com/2022/01/10/%E6%90%AD%E5%BB%BAhexoBlog/",
            "title": "搭建Hexo的基本工具",
            "date_published": "2022-01-10T11:34:36.849Z",
            "content_html": "<h2 id=\"一-下载git官网下载\"><a class=\"markdownIt-Anchor\" href=\"#一-下载git官网下载\">#</a> 一、下载 Git: 官网下载</h2>\n<pre><code>    傻瓜式安装，一路跟着推荐安装好，或者从网上搜索安装步骤。\n</code></pre>\n<h2 id=\"二-安装nodejs官网下载\"><a class=\"markdownIt-Anchor\" href=\"#二-安装nodejs官网下载\">#</a> 二、安装 node.js: 官网下载</h2>\n<h2 id=\"三-根据网上教程配置git和nodejs的环境变量\"><a class=\"markdownIt-Anchor\" href=\"#三-根据网上教程配置git和nodejs的环境变量\">#</a> 三、根据网上教程配置 Git 和 node.js 的环境变量</h2>\n<h2 id=\"四-运行cmd\"><a class=\"markdownIt-Anchor\" href=\"#四-运行cmd\">#</a> 四、 运行 cmd</h2>\n<p>1.(分别输入，下列每输一行敲一个回车)(注意空格)</p>\n<figure class=\"highlight cpp\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br><span class=\"line\">git --version   </span><br></pre></td></tr></table></figure>\n<p>得到相对应的版本信息（如图）:</p>\n<div align=\"center\">\n<img data-src=\"./assets/3.png\" width=\"70%\">\n</div>\n<p>如果都可以成功运行出现版本信息证明安装成功。</p>\n<p>2. 安装 Hexo<br>\n (1) 必须按照步骤来，因为 hexo 需要使用 node.js 的 npm;<br>\n(2) 打开 cmd 命令行 (win+r 输入 cmd 回车) 分别执行:</p>\n<figure class=\"highlight cpp\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<p>(3) 等待自动安装完成后。输入</p>\n<figure class=\"highlight cpp\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo -v</span><br></pre></td></tr></table></figure>\n<p>(4) 检查是否安装成功，到这一步如果所有都安装成功，并测试无问题，那么本地配置已经搞定，下面开始在 github 上建项目了。</p>\n<h2 id=\"五-在github上创建并设置远程库\"><a class=\"markdownIt-Anchor\" href=\"#五-在github上创建并设置远程库\">#</a> 五、在 github 上创建并设置远程库</h2>\n<p>1. 选择 New repository，</p>\n<p>2. 在 Repository name 下面填写你要创建的地址，这个地址是就是你的域名，以 github.io 结尾。<br>\n例如：填写 &quot;<span class=\"exturl\" data-url=\"aHR0cDovL3dhcGNoaWVmLmdpdGh1Yi5pbw==\">wapchief.github.io</span>&quot; 以后，<br>\n 在地址栏直接输入 &quot;<span class=\"exturl\" data-url=\"aHR0cDovL3dhcGNoaWVmLmdpdGh1Yi5pbw==\">wapchief.github.io</span>&quot; 就可以访问网站，<br>\n 按照提示一步步完成创建。</p>\n<p 本人操作=\"\">3. 创建之后，点击 setting 设置远程库：<br>\n(1) 找到 &quot;GitHub Pages&quot; 点击 &quot;Automatic page generator&quot; 等待 github pages 创建完成。<br>\n(2) 输入你创建的地址测试 github pager 是否创建成功。此时页面是空的没有任何东西。</p>\n<pre><code>     【1】选择New repository\n     【2】在Repository name下面填写要创建的地址，这个地址就是我的域名，以github.io结尾。即codelinghan.github.io\n     【3】选择public\n     【4】点击新建仓库\n</code></pre>\n<h2 id=\"六-配置git和nodejs\"><a class=\"markdownIt-Anchor\" href=\"#六-配置git和nodejs\">#</a> 六、配置 Git 和 node.js</h2>\n<p>配置个人的用户名称和电子邮件地址：</p>\n<figure class=\"highlight cpp\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">&quot;xxx&quot;</span>  <span class=\"comment\">//xxx指GitHub用户名</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">&quot;767523580@qq.com&quot;</span></span><br><span class=\"line\">      <span class=\"comment\">//随便写一个邮箱即可，或者写Github上的邮箱</span></span><br></pre></td></tr></table></figure>\n<p>可以查看已有的配置信息：</p>\n<figure class=\"highlight cpp\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --list</span><br></pre></td></tr></table></figure>\n<h2 id=\"七-生成博客内容\"><a class=\"markdownIt-Anchor\" href=\"#七-生成博客内容\">#</a> 七、生成博客内容</h2>\n<p>【1】初始化 hexo 基础配置文件。初始化时间比较长，不用急，等完成后输入：</p>\n<figure class=\"highlight cpp\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n<p>【2】然后输入：</p>\n<figure class=\"highlight cpp\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">     <span class=\"comment\">//加载hexo基础html、css、js等文件。在这完成后等于已经在本地创建了一个网页</span></span><br></pre></td></tr></table></figure>\n<p>【3】接着输入：</p>\n<figure class=\"highlight cpp\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br><span class=\"line\"> <span class=\"comment\">//然后相当于开启了一个本地的服务器，会提示你拷贝url到浏览器</span></span><br></pre></td></tr></table></figure>\n<div align=\"center\">\n<img data-src=\"./assets/5.png\" width=\"80%\">\n</div>\n<p>【4】 会看到这样的页面，证明本地 hexo 默认模板配置成功。</p>\n<div align=\"center\">\n<img data-src=\"./assets/6.png\" width=\"80%\">\n</div>\n<h2 id=\"八-部署blog到互联网\"><a class=\"markdownIt-Anchor\" href=\"#八-部署blog到互联网\">#</a> 八、部署 Blog 到互联网</h2>\n<p>【1】 打开 Blog 文件夹，打开 “_config.yml” 文件<br>\n修改最后的 deploy 为</p>\n<pre><code>deploy:\n    type: git\n    repo: https://github.com/Codelinghan/Codelinghan.github.io.git\n    branch: main\n\n注意：\n      repo: https://github.com/Codelinghan/Codelinghan.github.io.git\n           （https://github.com/Codelinghan/Codelinghan.github.io.git 这个链接是Github的仓库地址）\n</code></pre>\n<p>【2】在创建的 blog 的目录下，安装部署工具（方便以后更新）<br>\n即：在创建的 blog 的目录下，运行【Git Bash Here】, 执行下列命令：</p>\n<figure class=\"highlight cpp\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git -save</span><br><span class=\"line\">            <span class=\"comment\">//自动部署发布工具</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"九-在创建的blog的目录下\"><a class=\"markdownIt-Anchor\" href=\"#九-在创建的blog的目录下\">#</a> 九、在创建的 blog 的目录下</h2>\n<p>运行【Git Bash Here】, 执行下列命令：</p>\n<figure class=\"highlight cpp\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo c   <span class=\"comment\">//清理一下         </span></span><br><span class=\"line\">hexo g   <span class=\"comment\">//指生成               </span></span><br><span class=\"line\">hexo d   <span class=\"comment\">//部署到远程Github仓库</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"十-问题\"><a class=\"markdownIt-Anchor\" href=\"#十-问题\">#</a> 十、问题</h2>\n<p>【1】出现<br>\n Maybe you can find the solution here:<span class=\"exturl\" data-url=\"aHR0cDovL2hleG8uaW8vZG9jcy90cm91Ymxlc2hvb3RpbmcuaHRtbCVFNiU4QSVBNSVFOSU5NCU5OSVFRiVCQyU5QQ==\">http://hexo.io/docs/troubleshooting.html 报错：</span><br>\n主要问题是找不到 git 分支，然后我查看当前文件夹没有.git 文件夹，使用 git init 生成 git 文件夹。<br>\n然后使用 hexo deploy（即：hexo d）上传即可<br>\n【2】Git 报错解决：OpenSSL SSL_read: Connection was reset, errno 10054 错误解决：<br>\n(1) 首先，造成这个错误很有可能是网络不稳定，连接超时导致的，<br>\n(2) 如果再次尝试后依然报错，可以执行下面的命令:<br>\n 打开 Git 命令页面，执行 git 命令脚本：修改设置，解除 ssl 验证</p>\n<figure class=\"highlight cpp\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.sslVerify <span class=\"string\">&quot;false&quot;</span></span><br></pre></td></tr></table></figure>\n<div align=\"center\">\n<img data-src=\"./assets/7.png\" width=\"80%\">\n</div>",
            "tags": []
        },
        {
            "id": "http://example.com/2022/01/01/ssh%20key%20%E8%AE%BE%E7%BD%AE/",
            "url": "http://example.com/2022/01/01/ssh%20key%20%E8%AE%BE%E7%BD%AE/",
            "title": "ssh key 设置",
            "date_published": "2022-01-01T08:50:02.703Z",
            "content_html": "<p>在 gitee、github、本地 gitlab 上同时添加 ssh key</p>\n<h2 id=\"一-打开-ssh文件夹\"><a class=\"markdownIt-Anchor\" href=\"#一-打开-ssh文件夹\">#</a> 一、打开 .ssh 文件夹</h2>\n<pre><code>   C:\\Users\\Administrator\\.ssh\n</code></pre>\n<h2 id=\"二-打开git-bash-here\"><a class=\"markdownIt-Anchor\" href=\"#二-打开git-bash-here\">#</a> 二、打开【git bash here】</h2>\n<pre><code>   在.ssh 文件夹右键打开【git bash here】\n</code></pre>\n<h2 id=\"三-通过执行以下命令依次生成ssh-key\"><a class=\"markdownIt-Anchor\" href=\"#三-通过执行以下命令依次生成ssh-key\">#</a> 三、通过执行以下命令，依次生成 ssh key</h2>\n<figure class=\"highlight cpp\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">&quot;xxx@qq.com&quot;</span> -f <span class=\"string\">&quot;gitee_id_rsa&quot;</span></span><br><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">&quot;xxx@qq.com&quot;</span> -f <span class=\"string\">&quot;github_id_rsa&quot;</span></span><br><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">&quot;xxx@qq.com&quot;</span> -f <span class=\"string\">&quot;gitlab_id_rsa&quot;</span></span><br></pre></td></tr></table></figure>\n<p>完成后，.ssh 文件夹中显示如下图:</p>\n<div align=\"center\">\n<img data-src=\"./assets/1.png\" width=\"80%\">\n</div>\n<h2 id=\"四-在gitee-github-本地gitlab上配置ssh-key\"><a class=\"markdownIt-Anchor\" href=\"#四-在gitee-github-本地gitlab上配置ssh-key\">#</a> 四、在 gitee、github、本地 gitlab 上配置 ssh key</h2>\n<p>生成后查看 ssh 公钥，即执行下列命令：</p>\n<figure class=\"highlight cpp\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat ~/.ssh/gitee_id_rsa.pub</span><br></pre></td></tr></table></figure>\n<p>将其内容复制到 gitee 的 ssh key 中保存。</p>\n<p>同理，GitHub，gitlab 也是相同操作。</p>\n<h2 id=\"五-创建config文件解决ssh冲突\"><a class=\"markdownIt-Anchor\" href=\"#五-创建config文件解决ssh冲突\">#</a> 五、创建 config 文件解决 ssh 冲突</h2>\n<p>1. 执行命令：</p>\n<figure class=\"highlight cpp\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi config</span><br></pre></td></tr></table></figure>\n<p>2. 输入字母 i，进入编辑模式；<br>\n3. 再点击 esc, 输入 “： wq”，再按回车；<br>\n4. 找到 config 文件，并打开，将以下内容复制到 config 文件中，再保存。</p>\n<figure class=\"highlight cpp\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># gitee</span></span><br><span class=\"line\">Host gitee.com</span><br><span class=\"line\">HostName gitee.com</span><br><span class=\"line\">PreferredAuthentications publickey</span><br><span class=\"line\">IdentityFile ~/.ssh/gitee_id_rsa</span><br><span class=\"line\"><span class=\"meta\"># github</span></span><br><span class=\"line\">Host github.com</span><br><span class=\"line\">HostName github.com</span><br><span class=\"line\">PreferredAuthentications publickey</span><br><span class=\"line\">IdentityFile ~/.ssh/github_id_rsa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># gitlab</span></span><br><span class=\"line\">host gitlab.com</span><br><span class=\"line\">hostname git@<span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.111</span>  # 添加自己公司的私有ip即可</span><br><span class=\"line\">PreferredAuthentications publickey</span><br><span class=\"line\">IdentityFile ~/.ssh/gitlab_id_rsa</span><br></pre></td></tr></table></figure>\n<h2 id=\"六-测试是否连接成功\"><a class=\"markdownIt-Anchor\" href=\"#六-测试是否连接成功\">#</a> 六、测试是否连接成功</h2>\n<p>分别执行以下命令：</p>\n<figure class=\"highlight cpp\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@gitee.com</span><br><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>测试 gitlab 命令：</p>\n<figure class=\"highlight cpp\"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@<span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.111</span></span><br></pre></td></tr></table></figure>\n<p>输出以下内容就表示连接成功：</p>\n<div align=\"center\">\n<img data-src=\"./assets/2.png\" width=\"80%\">\n</div>\n",
            "tags": []
        }
    ]
}