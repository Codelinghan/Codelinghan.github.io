{
    "version": "https://jsonfeed.org/version/1",
    "title": "凌寒",
    "subtitle": "",
    "icon": "https://codelinghan.github.io/images/favicon.ico",
    "description": "生活记录 & 计算机学习",
    "home_page_url": "https://codelinghan.github.io",
    "items": [
        {
            "id": "https://codelinghan.github.io/2022/Hexo/%E6%B7%BB%E5%8A%A0ssh%20key/",
            "url": "https://codelinghan.github.io/2022/Hexo/%E6%B7%BB%E5%8A%A0ssh%20key/",
            "title": "添加 ssh key",
            "date_published": "2022-01-27T11:51:35.591Z",
            "content_html": "<p>在 gitee、github、本地 gitlab 上同时添加 ssh key</p>\n<h1 id=\"一-打开-ssh文件夹\"><a class=\"anchor\" href=\"#一-打开-ssh文件夹\">#</a> 一、打开 .ssh 文件夹</h1>\n<blockquote>\n<p>C:\\Users\\Administrator.ssh</p>\n</blockquote>\n<h1 id=\"二-打开git-bash-here\"><a class=\"anchor\" href=\"#二-打开git-bash-here\">#</a> 二、打开【git bash here】</h1>\n<blockquote>\n<p>在.ssh 文件夹右键打开【git bash here】</p>\n</blockquote>\n<h1 id=\"三-通过执行以下命令依次生成ssh-key\"><a class=\"anchor\" href=\"#三-通过执行以下命令依次生成ssh-key\">#</a> 三、通过执行以下命令，依次生成 ssh key</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ ssh<span class=\"token operator\">-</span>keygen <span class=\"token operator\">-</span>t rsa <span class=\"token operator\">-</span>C <span class=\"token string\">\"xxx@qq.com\"</span> <span class=\"token operator\">-</span>f <span class=\"token string\">\"gitee_id_rsa\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ ssh<span class=\"token operator\">-</span>keygen <span class=\"token operator\">-</span>t rsa <span class=\"token operator\">-</span>C <span class=\"token string\">\"xxx@qq.com\"</span> <span class=\"token operator\">-</span>f <span class=\"token string\">\"github_id_rsa\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ ssh<span class=\"token operator\">-</span>keygen <span class=\"token operator\">-</span>t rsa <span class=\"token operator\">-</span>C <span class=\"token string\">\"xxx@qq.com\"</span> <span class=\"token operator\">-</span>f <span class=\"token string\">\"gitlab_id_rsa\"</span></pre></td></tr></table></figure><p>完成后，.ssh 文件夹中显示如下图:</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Codelinghan/image-hosting@master/imgpath/1.6hvrs1lf63w0.webp\" alt=\"1\" /></p>\n<h1 id=\"四-在gitee-github-本地gitlab上配置ssh-key\"><a class=\"anchor\" href=\"#四-在gitee-github-本地gitlab上配置ssh-key\">#</a> 四、在 gitee、github、本地 gitlab 上配置 ssh key</h1>\n<p>生成后查看 ssh 公钥，即执行下列命令：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ cat <span class=\"token operator\">~</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>ssh<span class=\"token operator\">/</span>gitee_id_rsa<span class=\"token punctuation\">.</span>pub</pre></td></tr></table></figure><p>将其内容复制到 gitee 的 ssh key 中保存。</p>\n<p>同理，GitHub，gitlab 也是相同操作。</p>\n<h1 id=\"五-创建config文件解决ssh冲突\"><a class=\"anchor\" href=\"#五-创建config文件解决ssh冲突\">#</a> 五、创建 config 文件解决 ssh 冲突</h1>\n<blockquote>\n<p>1. 执行命令：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ vi config</pre></td></tr></table></figure><p>2. 输入字母 i，进入编辑模式；<br />\n3. 再点击 esc, 输入 “： wq”，再按回车；<br />\n4. 找到 config 文件，并打开，将以下内容复制到 config 文件中，再保存。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">gitee</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Host gitee<span class=\"token punctuation\">.</span>com</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>HostName gitee<span class=\"token punctuation\">.</span>com</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>PreferredAuthentications publickey</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>IdentityFile <span class=\"token operator\">~</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>ssh<span class=\"token operator\">/</span>gitee_id_rsa</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">github</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Host github<span class=\"token punctuation\">.</span>com</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>HostName github<span class=\"token punctuation\">.</span>com</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>PreferredAuthentications publickey</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>IdentityFile <span class=\"token operator\">~</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>ssh<span class=\"token operator\">/</span>github_id_rsa</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">gitlab</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>host gitlab<span class=\"token punctuation\">.</span>com</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>hostname git@<span class=\"token number\">192.168</span><span class=\"token punctuation\">.</span><span class=\"token number\">1.111</span>  # 添加自己公司的私有ip即可</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>PreferredAuthentications publickey</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>IdentityFile <span class=\"token operator\">~</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>ssh<span class=\"token operator\">/</span>gitlab_id_rsa</pre></td></tr></table></figure></blockquote>\n<h1 id=\"六-测试是否连接成功\"><a class=\"anchor\" href=\"#六-测试是否连接成功\">#</a> 六、测试是否连接成功</h1>\n<p>分别执行以下命令：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ ssh <span class=\"token operator\">-</span>T git@gitee<span class=\"token punctuation\">.</span>com</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ ssh <span class=\"token operator\">-</span>T git@github<span class=\"token punctuation\">.</span>com</pre></td></tr></table></figure><p>测试 gitlab 命令：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ ssh <span class=\"token operator\">-</span>T git@<span class=\"token number\">192.168</span><span class=\"token punctuation\">.</span><span class=\"token number\">1.111</span></pre></td></tr></table></figure><p>输出以下内容就表示连接成功：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Codelinghan/image-hosting@master/imgpath/2.59rjp8lrpy00.jpg\" alt=\"2\" /></p>\n",
            "tags": [
                "Hexo",
                ".ssh key"
            ]
        },
        {
            "id": "https://codelinghan.github.io/2022/Hexo/Hexo%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/",
            "url": "https://codelinghan.github.io/2022/Hexo/Hexo%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/",
            "title": "Hexo报错问题",
            "date_published": "2022-01-27T11:47:10.953Z",
            "content_html": "<h1 id=\"一-highlightjs9版本已停用升级成最新版本\"><a class=\"anchor\" href=\"#一-highlightjs9版本已停用升级成最新版本\">#</a> 一、highlight.js@9 版本已停用，升级成最新版本</h1>\n<h2 id=\"1点进blog文件夹右键git-bush-here执行以下命令\"><a class=\"anchor\" href=\"#1点进blog文件夹右键git-bush-here执行以下命令\">#</a> 1. 点进 Blog 文件夹，右键【Git Bush Here】，执行以下命令：</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm ls highlight<span class=\"token punctuation\">.</span>js</pre></td></tr></table></figure><p>查看 highlight.js 的位置。</p>\n<p>即：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Codelinghan/image-hosting@master/imgpath/8.43hvucp4ecs0.jpg\" alt=\"8\" /></p>\n<h2 id=\"2进入带有highlightjs的位置文件夹右键git-bush-here执行以下命令\"><a class=\"anchor\" href=\"#2进入带有highlightjs的位置文件夹右键git-bush-here执行以下命令\">#</a> 2. 进入带有 highlight.js 的位置文件夹，右键【Git Bush Here】，执行以下命令：</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm uninstall highlight<span class=\"token punctuation\">.</span>js</pre></td></tr></table></figure><p>再执行：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install highlight<span class=\"token punctuation\">.</span>js <span class=\"token operator\">--</span>save</pre></td></tr></table></figure><p>检验，执行以下命令：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm ls highlight<span class=\"token punctuation\">.</span>js</pre></td></tr></table></figure><p>即：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Codelinghan/image-hosting@master/imgpath/9.29a63m16yzvo.jpg\" alt=\"9\" /></p>\n<p>命令执行如图所示就代表成功升级。</p>\n",
            "tags": [
                "Hexo",
                "Hexo"
            ]
        },
        {
            "id": "https://codelinghan.github.io/2022/notes/02.GitHub%E4%B8%8A%E4%BC%A0%E6%8A%A5%E9%94%99/",
            "url": "https://codelinghan.github.io/2022/notes/02.GitHub%E4%B8%8A%E4%BC%A0%E6%8A%A5%E9%94%99/",
            "title": "将本地项目上传到Github",
            "date_published": "2022-01-25T14:11:57.977Z",
            "content_html": "<h1 id=\"创建本地仓库\"><a class=\"anchor\" href=\"#创建本地仓库\">#</a> 创建本地仓库</h1>\n<ul>\n<li>打开本地项目的根目录，右键<span class=\"red\"> Git Bash Here</span></li>\n<li>执行以下命令：</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ git init</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ git status</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>$ git add <span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>$ git commit <span class=\"token operator\">-</span>m<span class=\"token string\">\"提交文件\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">//</span></pre></td></tr></table></figure><h1 id=\"关联github仓库\"><a class=\"anchor\" href=\"#关联github仓库\">#</a> 关联 GitHub 仓库</h1>\n<ul>\n<li>新建 GitHub 仓库（例如：仓库名为 Blog），注意，这个仓库是空仓库，什么都没有</li>\n<li>GitHub 仓库建立后，与本地仓库关联（有两种方式）</li>\n</ul>\n<blockquote>\n<p>第一种</p>\n<ul>\n<li>执行命令</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ git remote add origin git@github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">:</span>smfx1314<span class=\"token operator\">/</span>Blog<span class=\"token punctuation\">.</span>git</pre></td></tr></table></figure><p>第二种</p>\n<ul>\n<li>打开本地项目的根目录，打开<span class=\"red\">.git</span> 文件夹（这个是隐藏文件夹）</li>\n<li>打开<span class=\"red\"> config</span> 文件，将以下代码复制粘贴进去：</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>remote <span class=\"token string\">\"origin\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\turl <span class=\"token operator\">=</span> git@github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">:</span>你的GitHub用户名<span class=\"token operator\">/</span>Blog<span class=\"token punctuation\">.</span>git</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tfetch <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>refs<span class=\"token operator\">/</span>heads<span class=\"token comment\">/*:refs/remotes/origin/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>[branch \"master\"]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  remote = origin</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  merge = refs/heads/master</span></pre></td></tr></table></figure></blockquote>\n<ul>\n<li>执行以下命令，查看是否成功</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ git remote <span class=\"token operator\">-</span>v</pre></td></tr></table></figure><p>结果如图：</p>\n<h1 id=\"将本地项目所有内容推送到github仓库\"><a class=\"anchor\" href=\"#将本地项目所有内容推送到github仓库\">#</a> 将本地项目所有内容推送到 GitHub 仓库</h1>\n<ul>\n<li>执行命令：</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ git push origin master</pre></td></tr></table></figure><h1 id=\"上传过程中的问题报错\"><a class=\"anchor\" href=\"#上传过程中的问题报错\">#</a> 上传过程中的问题，报错</h1>\n<h3 id=\"报错fatal-couldnt-find-remote-ref-master\"><a class=\"anchor\" href=\"#报错fatal-couldnt-find-remote-ref-master\">#</a> 报错：fatal: couldn't find remote ref master</h3>\n<blockquote>\n<ul>\n<li>解决方法：</li>\n<li>打开本地项目的根目录，打开<span class=\"red\">.git</span> 文件夹（这个是隐藏文件夹）</li>\n<li>打开<span class=\"red\"> config</span> 文件，将以下代码复制粘贴进去：</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>branch <span class=\"token string\">\"master\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  remote <span class=\"token operator\">=</span> origin</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  merge <span class=\"token operator\">=</span> refs<span class=\"token operator\">/</span>heads<span class=\"token operator\">/</span>master</pre></td></tr></table></figure></blockquote>\n<h3 id=\"errorsrc-refspec-master-does-not-match-any或者error-failed-to-push-some-refs-to\"><a class=\"anchor\" href=\"#errorsrc-refspec-master-does-not-match-any或者error-failed-to-push-some-refs-to\">#</a> error:src refspec master does not match any 或者 error: failed to push some refs to</h3>\n<blockquote>\n<ul>\n<li>出错原因：(有可能)<br />\n 本地的 origin 与 remote 中的 master 未建立联系；</li>\n<li>解决方法：<br />\n1. 打开本地项目的根目录，打开<span class=\"red\">.git</span> 文件夹（这个是隐藏文件夹）<br />\n2. 打开<span class=\"red\"> config</span> 文件，将以下代码复制粘贴进去：</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>branch <span class=\"token string\">\"master\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  remote <span class=\"token operator\">=</span> origin</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  merge <span class=\"token operator\">=</span> refs<span class=\"token operator\">/</span>heads<span class=\"token operator\">/</span>master</pre></td></tr></table></figure></blockquote>\n<pre><code> 我出现以上两种报错均因为[本地的origin与remote中的master没有建立联系]&#123;.red&#125;\n</code></pre>\n<p>补充：出错原因还有可能是：</p>\n<blockquote>\n<p>1.GitHub 仓库中的文件与本地项目中的文件产生冲突；<br />\n2. 本地项目中的文件有空文件；</p>\n</blockquote>\n",
            "tags": [
                "笔记",
                "Github"
            ]
        },
        {
            "id": "https://codelinghan.github.io/2022/Hexo/01.%E6%90%AD%E5%BB%BA%20Hexo/",
            "url": "https://codelinghan.github.io/2022/Hexo/01.%E6%90%AD%E5%BB%BA%20Hexo/",
            "title": "01.Hexo+shoka+GitHub搭建",
            "date_published": "2022-01-25T14:11:57.965Z",
            "content_html": "<div class=\"note primary\">\n<p>🍒<span class=\"purple\">搭建 Hexo</span>(<a href=\"https://codelinghan.github.io/2022/Hexo/01.%E6%90%AD%E5%BB%BAHexo/\">https://codelinghan.github.io/2022/Hexo/01. 搭建 Hexo/</a>)-🍑<span>配置 shoka 主题</span> [<span class=\"purple\">配置 shoka 主题</span>]-🍌[<a href=\"https://codelinghan.github.io/2022/Hexo/03.shoka%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/\" class=\"purple\">shoka 主题优化</a> -🍇</p>\n<p><span>配置 shoka 主题</span> [<span class=\"purple\">配置 shoka 主题</span>]:<a href=\"https://codelinghan.github.io/2022/Hexo/02.%E9%85%8D%E7%BD%AEshoka%E4%B8%BB%E9%A2%98/\">https://codelinghan.github.io/2022/Hexo/02. 配置 shoka 主题 /</a></p>\n</div>\n<h1 id=\"下载git官网下载\"><a class=\"anchor\" href=\"#下载git官网下载\">#</a> 下载 Git: 官网下载</h1>\n<ul>\n<li>一路跟着推荐安装即可，或者从网上搜索安装步骤。</li>\n</ul>\n<h1 id=\"安装nodejs官网下载\"><a class=\"anchor\" href=\"#安装nodejs官网下载\">#</a> 安装 node.js: 官网下载</h1>\n<div class=\"note info\">\n<p>根据网上教程配置 Git 和 node.js 的环境变量</p>\n</div>\n<h1 id=\"运行cmd\"><a class=\"anchor\" href=\"#运行cmd\">#</a> 运行<span class=\"red\"> cmd</span></h1>\n<blockquote>\n<p>1.(分别输入，下列每输一行敲一个回车)(注意空格)</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>node <span class=\"token operator\">-</span>v</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>npm <span class=\"token operator\">-</span>v</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>git <span class=\"token operator\">--</span>version</pre></td></tr></table></figure><p>得到相对应的版本信息（如图）:</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Codelinghan/image-hosting@master/imgpath/3.63ri0l0i4400.webp\" alt=\"3\" /></p>\n<p>如果都可以成功运行出现版本信息证明安装成功。</p>\n<p>2. 安装 Hexo<br />\n (1) 必须按照步骤来，因为 hexo 需要使用 node.js 的 npm;<br />\n(2) 打开 cmd 命令行 (win+r 输入 cmd 回车) 分别执行:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install hexo<span class=\"token operator\">-</span>cli <span class=\"token operator\">-</span>g</pre></td></tr></table></figure><p>3. 等待自动安装完成后。输入</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo <span class=\"token operator\">-</span>v</pre></td></tr></table></figure><p>4. 检查是否安装成功</p>\n</blockquote>\n<div class=\"note info\">\n<p>到这一步如果所有都安装成功，并测试无问题，那么本地配置已经搞定，下面开始在 github 上建项目了。</p>\n</div>\n<h1 id=\"在github上创建并设置远程库\"><a class=\"anchor\" href=\"#在github上创建并设置远程库\">#</a> 在 github 上创建并设置远程库</h1>\n<blockquote>\n<p>1. 选择 New repository，<br />\n2. 在 Repository name 下面填写你要创建的地址，这个地址是就是你的域名，以 github.io 结尾。<br />\n例如：填写 &quot;<span class=\"exturl\" data-url=\"aHR0cDovL3dhcGNoaWVmLmdpdGh1Yi5pbw==\">wapchief.github.io</span>&quot;以后，在地址栏直接输入&quot;<span class=\"exturl\" data-url=\"aHR0cDovL3dhcGNoaWVmLmdpdGh1Yi5pbw==\">wapchief.github.io</span>&quot; 就可以访问网站，<br />\n 按照提示一步步完成创建。<br />\n3. 创建之后，点击 setting 设置远程库：</p>\n<blockquote>\n<p>(1) 找到 &quot;GitHub Pages&quot; 点击 &quot;Automatic page generator&quot; 等待 github pages 创建完成。<br />\n(2) 输入你创建的地址测试 github pager 是否创建成功。此时页面是空的没有任何东西。</p>\n</blockquote>\n</blockquote>\n<p>作者本人的操作是：</p>\n<blockquote>\n<ul>\n<li>1. 选择 New repository</li>\n<li>2. 在 Repository name 下面填写要创建的地址，这个地址就是我的域名，以 github.io 结尾。<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1jb2RlbGluZ2hhbi11OTFzLmdpdGh1Yi5pbw==\">即 codelinghan.github.io</span></li>\n<li>3. 选择 public</li>\n<li>4. 点击新建仓库</li>\n</ul>\n</blockquote>\n<h1 id=\"配置git和nodejs\"><a class=\"anchor\" href=\"#配置git和nodejs\">#</a> 配置 Git 和 node.js</h1>\n<p>配置个人的用户名称和电子邮件地址：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ git config <span class=\"token operator\">--</span>global user<span class=\"token punctuation\">.</span>name <span class=\"token string\">\"xxx\"</span>  <span class=\"token comment\">//xxx 指 GitHub 用户名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ git config <span class=\"token operator\">--</span>global user<span class=\"token punctuation\">.</span>email <span class=\"token string\">\"767523580@qq.com\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token comment\">// 随便写一个邮箱即可，或者写 Github 上的邮箱</span></pre></td></tr></table></figure><p>可以查看已有的配置信息：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ git config <span class=\"token operator\">--</span>list</pre></td></tr></table></figure><h1 id=\"生成博客内容\"><a class=\"anchor\" href=\"#生成博客内容\">#</a> 生成博客内容</h1>\n<blockquote>\n<p>1. 初始化 hexo 基础配置文件。<br />\n初始化时间比较长，不用急，等完成后输入：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo init</pre></td></tr></table></figure><p>2. 然后输入：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo g</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 加载 hexo 基础 html、css、js 等文件。在这完成后等于已经在本地创建了一个网页</span></pre></td></tr></table></figure><p>3. 接着输入：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo s</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">// 然后相当于开启了一个本地的服务器，会提示你拷贝 url 到浏览器</span></pre></td></tr></table></figure><p><img data-src=\"https://cdn.jsdelivr.net/gh/Codelinghan/image-hosting@master/imgpath/5.26osu2rhnon.jpg\" alt=\"5\" /></p>\n<p>会看到以下的页面，证明本地 hexo 默认模板配置成功。<br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/Codelinghan/image-hosting@master/imgpath/6.izctum4a3q0.jpg\" alt=\"6\" /></p>\n</blockquote>\n<h1 id=\"部署blog到互联网\"><a class=\"anchor\" href=\"#部署blog到互联网\">#</a> 部署 Blog 到互联网</h1>\n<blockquote>\n<p>1. 打开 Blog 文件夹，打开 “_config.yml” 文件<br />\n修改最后的 deploy 为</p>\n<pre><code>  deploy:\n       type: git\n       repo: https://github.com/Codelinghan/Codelinghan.github.io.git\n       branch: main\n\n   注意：\n         repo: https://github.com/Codelinghan/Codelinghan.github.io.git\n              （https://github.com/Codelinghan/Codelinghan.github.io.git 这个链接是Github的仓库地址）\n</code></pre>\n<p>2. 在创建的 blog 的目录下，安装部署工具（方便以后更新）<br />\n即：在创建的 blog 的目录下，运行【Git Bash Here】, 执行下列命令：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>{.line-numbers}      </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install hexo<span class=\"token operator\">-</span>deployer<span class=\"token operator\">-</span>git <span class=\"token operator\">-</span>save</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>           <span class=\"token comment\">// 自动部署发布工具</span></pre></td></tr></table></figure></blockquote>\n<h1 id=\"在创建的blog的目录下\"><a class=\"anchor\" href=\"#在创建的blog的目录下\">#</a> 在创建的 blog 的目录下</h1>\n<p>运行【Git Bash Here】, 执行下列命令：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>{.line-numbers} </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo c   <span class=\"token comment\">// 清理一下         </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo g   <span class=\"token comment\">// 指生成               </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hexo d   <span class=\"token comment\">// 部署到远程 Github 仓库</span></pre></td></tr></table></figure><h1 id=\"出现的问题\"><a class=\"anchor\" href=\"#出现的问题\">#</a> 出现的问题</h1>\n<ul>\n<li>出现 Maybe you can find the solution here:<span class=\"exturl\" data-url=\"aHR0cDovL2hleG8uaW8vZG9jcy90cm91Ymxlc2hvb3RpbmcuaHRtbCVFNiU4QSVBNSVFOSU5NCU5OSVFRiVCQyU5QQ==\">http://hexo.io/docs/troubleshooting.html 报错：</span></li>\n</ul>\n<blockquote>\n<p>主要问题是找不到 git 分支，然后我查看当前文件夹没有.git 文件夹，使用 git init 生成 git 文件夹。<br />\n然后使用 hexo deploy（即：hexo d）上传即可</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo d</pre></td></tr></table></figure></blockquote>\n<ul>\n<li>Git 报错解决：OpenSSL SSL_read: Connection was reset, errno 10054</li>\n</ul>\n<blockquote>\n<p>错误解决：<br />\n(1) 首先，造成这个错误很有可能是网络不稳定，连接超时导致的，<br />\n(2) 如果再次尝试后依然报错，可以执行下面的命令:<br />\n 打开 Git 命令页面，执行 git 命令脚本：修改设置，解除 ssl 验证</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git config <span class=\"token operator\">--</span>global http<span class=\"token punctuation\">.</span>sslVerify <span class=\"token string\">\"false\"</span></pre></td></tr></table></figure><p><img data-src=\"https://cdn.jsdelivr.net/gh/Codelinghan/image-hosting@master/imgpath/7.4v49t67vv6s0.jpg\" alt=\"7\" /></p>\n</blockquote>\n",
            "tags": [
                "Hexo",
                "Hexo"
            ]
        },
        {
            "id": "https://codelinghan.github.io/2022/Hexo/02.%E9%85%8D%E7%BD%AEshoka%E4%B8%BB%E9%A2%98/",
            "url": "https://codelinghan.github.io/2022/Hexo/02.%E9%85%8D%E7%BD%AEshoka%E4%B8%BB%E9%A2%98/",
            "title": "02.配置shoka主题",
            "date_published": "2022-01-25T14:11:57.963Z",
            "content_html": "<div class=\"note info\">\n<p>shoka 主题配置 👉 <span>shoka 主题</span> [<span class=\"blue\">shoka 主题</span>]<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9jb25maWcv\">1</span></p>\n</div>\n<h1 id=\"algolia搜索功能\"><a class=\"anchor\" href=\"#algolia搜索功能\">#</a> algolia 搜索功能</h1>\n<h1 id=\"valine评论功能\"><a class=\"anchor\" href=\"#valine评论功能\">#</a> Valine 评论功能</h1>\n",
            "tags": [
                "Hexo",
                "Hexo"
            ]
        },
        {
            "id": "https://codelinghan.github.io/2022/Hexo/03.shoka%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/",
            "url": "https://codelinghan.github.io/2022/Hexo/03.shoka%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/",
            "title": "03.shoka主题优化",
            "date_published": "2022-01-25T14:11:57.962Z",
            "content_html": "",
            "tags": [
                "Hexo"
            ]
        },
        {
            "id": "https://codelinghan.github.io/2022/computer-science/operating-system/%E7%AC%AC%E4%B8%80%E7%AB%A0/",
            "url": "https://codelinghan.github.io/2022/computer-science/operating-system/%E7%AC%AC%E4%B8%80%E7%AB%A0/",
            "title": "",
            "date_published": "2022-01-23T08:34:52.738Z",
            "content_html": "",
            "tags": [
                "计算机科学",
                "操作系统"
            ]
        },
        {
            "id": "https://codelinghan.github.io/2022/computer-science/computer-organization/%E7%AC%AC%E4%B8%80%E7%AB%A0/",
            "url": "https://codelinghan.github.io/2022/computer-science/computer-organization/%E7%AC%AC%E4%B8%80%E7%AB%A0/",
            "title": "",
            "date_published": "2022-01-23T08:34:27.294Z",
            "content_html": "",
            "tags": [
                "计算机科学",
                "计算机组成原理"
            ]
        },
        {
            "id": "https://codelinghan.github.io/2022/computer-science/computer-networking/%E7%AC%AC%E4%B8%80%E7%AB%A0/",
            "url": "https://codelinghan.github.io/2022/computer-science/computer-networking/%E7%AC%AC%E4%B8%80%E7%AB%A0/",
            "title": "",
            "date_published": "2022-01-23T08:34:14.433Z",
            "content_html": "",
            "tags": [
                "计算机科学",
                "计算机网络"
            ]
        },
        {
            "id": "https://codelinghan.github.io/2022/course/English/02.%E4%BD%9C%E6%96%87/",
            "url": "https://codelinghan.github.io/2022/course/English/02.%E4%BD%9C%E6%96%87/",
            "title": "作文",
            "date_published": "2022-01-23T08:31:34.488Z",
            "content_html": "",
            "tags": [
                "外语",
                "English"
            ]
        },
        {
            "id": "https://codelinghan.github.io/2022/course/English/01.%E8%AF%AD%E6%B3%95/",
            "url": "https://codelinghan.github.io/2022/course/English/01.%E8%AF%AD%E6%B3%95/",
            "title": "语法",
            "date_published": "2022-01-23T08:31:20.150Z",
            "content_html": "",
            "tags": [
                "外语",
                "English"
            ]
        },
        {
            "id": "https://codelinghan.github.io/2022/computer-science/Date-structure/%E7%AC%AC%E4%B8%80%E7%AB%A0/",
            "url": "https://codelinghan.github.io/2022/computer-science/Date-structure/%E7%AC%AC%E4%B8%80%E7%AB%A0/",
            "title": "",
            "date_published": "2022-01-23T08:30:41.465Z",
            "content_html": "",
            "tags": [
                "计算机科学",
                "数据结构"
            ]
        },
        {
            "id": "https://codelinghan.github.io/2022/computer-language/C/%E7%AC%AC%E4%B8%80%E7%AB%A0/",
            "url": "https://codelinghan.github.io/2022/computer-language/C/%E7%AC%AC%E4%B8%80%E7%AB%A0/",
            "title": "",
            "date_published": "2022-01-23T08:29:45.983Z",
            "content_html": "",
            "tags": [
                "计算机语言",
                "C"
            ]
        },
        {
            "id": "https://codelinghan.github.io/2022/life/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/",
            "url": "https://codelinghan.github.io/2022/life/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/",
            "title": "Life Records",
            "date_published": "2022-01-23T05:36:54.123Z",
            "content_html": "",
            "tags": [
                "Every-day Life",
                "生活"
            ]
        },
        {
            "id": "https://codelinghan.github.io/2022/notes/01.VS%E6%8A%A5%E9%94%99%E6%80%BB%E7%BB%93/",
            "url": "https://codelinghan.github.io/2022/notes/01.VS%E6%8A%A5%E9%94%99%E6%80%BB%E7%BB%93/",
            "title": "VS学习过程中的报错、警告记录",
            "date_published": "2022-01-22T14:57:13.981Z",
            "content_html": "<h1 id=\"编译警告msb8028\"><a class=\"anchor\" href=\"#编译警告msb8028\">#</a> 编译警告 MSB8028</h1>\n<p>中间目录 (shared-intermediate-path) 包含从另一个项目 (intermediate-path) 共享的文件 。 这可能导致错误的清理和重新生成行为。</p>\n<p>VS 中，一个解决方案中有多个子项目时，出现 MSB8028 这个显示警告。</p>\n<blockquote>\n<h2 id=\"解决方法\"><a class=\"anchor\" href=\"#解决方法\">#</a> <strong>解决方法</strong></h2>\n<ul>\n<li>打开这个解决方案文件夹</li>\n<li>找到正在启用的子项目的项目文件夹并打开</li>\n<li>打开此项目文件夹，手动删除 &quot;Debug&quot; 文件夹 (即：解决方案 \\ 子项目 \\Debug)</li>\n<li>再重新生成 Debug 文件夹。</li>\n</ul>\n</blockquote>\n<h1 id=\"编译警告c6031\"><a class=\"anchor\" href=\"#编译警告c6031\">#</a> 编译警告 C6031</h1>\n<p>已忽略返回值： 调用的函数 可能会返回意外值</p>\n<blockquote>\n<h2 id=\"解决方法-3种\"><a class=\"anchor\" href=\"#解决方法-3种\">#</a> <strong>解决方法</strong> （3 种）</h2>\n<h3 id=\"1在文件顶部添加代码\"><a class=\"anchor\" href=\"#1在文件顶部添加代码\">#</a> 1. 在文件顶部添加代码</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span>disable<span class=\"token operator\">:</span><span class=\"token number\">6031</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr></table></figure><p>或者</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span>disable<span class=\"token operator\">:</span><span class=\"token number\">4996</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr></table></figure><p>作者本人添加了 “6031” 这行代码成功消除此警告。</p>\n<h3 id=\"2右键单击工程文件源代码main1c处\"><a class=\"anchor\" href=\"#2右键单击工程文件源代码main1c处\">#</a> 2. 右键单击工程文件源代码 (main1.c) 处</h3>\n<p>打开属性栏，然后<strong>配置属性</strong> &gt;<strong>C/C++</strong>&gt;<strong> 所有选项</strong>，将<strong> SDL 检查</strong>改为<strong>否</strong>，然后点击<strong>保存</strong>。（如下图）</p>\n<h3 id=\"3将scanf改为scanf_s\"><a class=\"anchor\" href=\"#3将scanf改为scanf_s\">#</a> 3. 将 scanf 改为 scanf_s</h3>\n<p>注意：该方法不安全！</p>\n</blockquote>\n<h1 id=\"编译警告c4996\"><a class=\"anchor\" href=\"#编译警告c4996\">#</a> 编译警告 C4996</h1>\n<p>VS 产生如下图错误：</p>\n<blockquote>\n<h2 id=\"解决方法-2\"><a class=\"anchor\" href=\"#解决方法-2\">#</a> <strong>解决方法</strong></h2>\n<p>在该文件最顶部（即：第一行）添加如下代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr></table></figure><p>例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span>disable<span class=\"token operator\">:</span><span class=\"token number\">6031</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a=%d\\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n",
            "tags": [
                "笔记",
                "C语言报错"
            ]
        }
    ]
}